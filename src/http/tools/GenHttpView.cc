#include <fstream>
#include <iostream>
#include <ctype.h>
#include <stdio.h>
#include <algorithm>
using   namespace   std;



static const std::string cxx_include="<%inc";
static const std::string cxx_end="%>";
static const std::string cxx_lang="<%c++";
static const std::string cxx_view_data="@@";
static const std::string cxx_output="$$";

std::string&   replace_all(std::string&   str,const   std::string&   old_value,const   std::string&   new_value)
{
	string::size_type   pos(0);
	while(true)   {


		//std::cout<<str<<endl;
		//std::cout<<"pos="<<pos<<endl;
		if(   (pos=str.find(old_value,pos))!=string::npos   ) {
			str = str.replace(pos, old_value.length(), new_value);
			pos += new_value.length()-old_value.length();
			pos++;
		}
		else
			break;
	}
	return   str;
}

void genHttpViewHeaderFile(std::ofstream &oHeadFile,const std::string className)
{
	oHeadFile<<"//this file is generated by program automatically,don't modify it!\n";
	oHeadFile<<"#include \"HttpView.h\"\n";
	oHeadFile<<"class "<<className<<":public HttpView\n";
	oHeadFile<<"{\npublic:\n\t"<<className<<"(){};\n\tvirtual ~"<<className<<"(){};\n\tDECLARE_TROBJECT_CLASS("<<className<<");\nprotected:\n\t\
			virtual HttpResponse genHttpResponse(const HttpViewData&);\n};";
}

void parseCxxLine(std::ofstream &oSrcFile,const std::string line,const std::string streamName,const std::string viewDataName)
{

	if(line.length()>0)
	{	std::string tmp=line;
		replace_all(tmp,cxx_output,streamName);
		replace_all(tmp,cxx_view_data,viewDataName);
		oSrcFile<<tmp<<"\n";
	}

}

void parseLine(std::ofstream &oSrcFile,std::string& line,const std::string& streamName,const std::string& viewDataName,int &cxx_flag,int returnFlag=1)
{
	std::string::size_type pos(0);
	if(line.length()==0)
		return;
	if(cxx_flag==0)
	{
		//find cxx lang begin
		if((pos=line.find(cxx_lang))!=std::string::npos)
		{
			std::string oldLine=line.substr(0,pos);
			parseLine(oSrcFile,oldLine,streamName,viewDataName,cxx_flag,0);
			std::string newLine=line.substr(pos+cxx_lang.length());
			cxx_flag=1;
			parseLine(oSrcFile,newLine,streamName,viewDataName,cxx_flag,returnFlag);
		}
		else
		{
			if(line.length()>0)
				oSrcFile<<"\t"<<streamName<<" << \""<<replace_all(line,"\"","\\\"");
			if(returnFlag)
				oSrcFile<<"\\n\";\n";
			else
				oSrcFile<<"\";\n";
		}
	}
	else
	{
		if((pos=line.find(cxx_end))!=std::string::npos)
		{
			std::string newLine=line.substr(0,pos);
			parseCxxLine(oSrcFile,newLine,streamName,viewDataName);
			std::string oldLine=line.substr(pos+cxx_end.length());
			cxx_flag=0;
			parseLine(oSrcFile,oldLine,streamName,viewDataName,cxx_flag,returnFlag);
		}
		else
		{
			parseCxxLine(oSrcFile,line,streamName,viewDataName);
		}
	}

}

void genHttpViewSourceFile(std::ofstream &oSrcFile,const std::string className,std::ifstream &infile)
{
	oSrcFile << "//this file is generated by program automatically,don't modify it!\n";
	oSrcFile << "#include \"" << className << ".h\"\n";
	oSrcFile <<"#include <string>\n";
	oSrcFile <<"#include <sstream>\n";
	oSrcFile <<"#include <map>\n";
	oSrcFile <<"#include <vector>\n";
	oSrcFile <<"#include <set>\n";
	oSrcFile <<"using namespace std;\n";
	std::string buffer;
	char line[8192];
	int import_flag=0;


	while(infile.getline(line,sizeof(line)))
	{
		buffer=line;

		std::string::size_type pos(0);


		if(!import_flag)
		{
			std::string lowerBuffer=buffer;
			std::transform(lowerBuffer.begin(), lowerBuffer.end(), lowerBuffer.begin(), ::tolower);
			if((pos=lowerBuffer.find(cxx_include))!=std::string::npos)
			{
				//std::cout<<"haha find it!"<<endl;
				std::string newLine=buffer.substr(pos+cxx_include.length());
				import_flag=1;
				if((pos=newLine.find(cxx_end))!=std::string::npos)
				{
					newLine=newLine.substr(0,pos);
					oSrcFile<<newLine<<"\n";
					break;
				}else{
					oSrcFile<<newLine<<"\n";

				}

			}
		}
		else
		{
			//std::cout<<buffer<<endl;
			if((pos=buffer.find(cxx_end))!=std::string::npos)
			{
				std::string newLine=buffer.substr(0,pos);
				oSrcFile<<newLine<<"\n";

				break;
			}
			else
			{
				//std::cout<<"to source file"<<buffer<<endl;
				oSrcFile<<buffer<<"\n";
			}

		}



	}
	//std::cout<<"import_flag="<<import_flag<<std::endl;
	if(import_flag==0)
	{
		infile.clear();
		infile.seekg(0,std::ifstream::beg);
	}

	//std::cout<<"file pos:"<<infile.tellg()<<std::endl;
	oSrcFile << "IMPL_TROBJECT_CLASS(" << className << ");\n";
	std::string viewDataName=className+"_view_data";
	oSrcFile <<"HttpResponse "<<className<<"::genHttpResponse(const HttpViewData& "<<viewDataName<<")\n{\n";
	//std::string bodyName=className+"_bodystr";
	std::string streamName=className+"_tmp_stream";

	//oSrcFile <<"\tstd::string "<<bodyName<<";\n";
	oSrcFile<<"\tstd::stringstream "<<streamName<<";\n";
	int cxx_flag=0;
	while(infile.getline(line,sizeof(line)))
	{
		buffer=line;
		parseLine(oSrcFile,buffer,streamName,viewDataName,cxx_flag);
	}

	oSrcFile<<"\tHttpResponse resp(close);\n";
	oSrcFile<<"\tresp.setStatusCode(HttpResponse::k200Ok);\n";
	oSrcFile<<"#ifdef CONTENT_TYPE\n";
	oSrcFile<<"\tresp.setContentTypeCode(CONTENT_TYPE);\n";
	oSrcFile<<"#else\n";
	oSrcFile<<"\tresp.setContentTypeCode(CT_TEXT_HTML);\n";
	oSrcFile<<"#endif\n";
	oSrcFile<<"\tresp.setBody("<<streamName<<".str().c_str());\n\treturn resp;\n}\n";
}
int getHttpViewSrc(std::string script_filename)
{
	std::cout<<"create HttpView Class file by "<<script_filename<<std::endl;
	std::ifstream infile(script_filename.c_str(),std::ifstream::in);
	if(infile)
	{
		std::string::size_type pos = script_filename.rfind(".");
		if(pos!=std::string::npos)
		{
			std::string className=script_filename.substr(0,pos);
			if((pos=className.rfind("/"))!=std::string::npos)
			{
				className=className.substr(pos+1);
			}
			std::cout<<"className="<<className<<std::endl;
			std::string headFileName=className+".h";
			std::string sourceFilename=className+".cc";
			std::ofstream oHeadFile(headFileName.c_str(),std::ofstream::out);
			std::ofstream oSourceFile(sourceFilename.c_str(),std::ofstream::out);
			if(!oHeadFile||!oSourceFile)
				return -1;

			genHttpViewHeaderFile(oHeadFile,className);
			genHttpViewSourceFile(oSourceFile,className,infile);
		}
		else
			return -1;
	}
	else
	{
		std::cerr<<"can't open file "<<script_filename<<std::endl;
		return -1;
	}
	return 0;
}
int main(int argc,char *argv[])
{
	if(argc<=1)
	{
		std::cout<<"usage:"<<argv[0]<<" filename"<<std::endl;
		return -1;
	}
	int i=0;
	for(i=1;i<argc;i++)
	{
		if(getHttpViewSrc(argv[i]))
			return -1;
	}
	return 0;
}
